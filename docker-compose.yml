services:
  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        NODE_VERSION: 22
        # Pass environment variables as build args
        VITE_AZURE_CLIENT_ID: ${VITE_AZURE_CLIENT_ID}
        VITE_AZURE_TENANT_ID: ${VITE_AZURE_TENANT_ID}
        VITE_AZURE_EXTERNAL_ID_DOMAIN: ${VITE_AZURE_EXTERNAL_ID_DOMAIN}
        VITE_AZURE_KNOWN_AUTHORITIES: ${VITE_AZURE_KNOWN_AUTHORITIES}
        VITE_AZURE_COSMOS_CONNECTION_STRING: ${VITE_AZURE_COSMOS_CONNECTION_STRING}
        VITE_AZURE_COSMOS_DATABASE: ${VITE_AZURE_COSMOS_DATABASE:-HealthMonitorDB}
        VITE_AZURE_STORAGE_ACCOUNT: ${VITE_AZURE_STORAGE_ACCOUNT}
        VITE_AZURE_STORAGE_CONTAINER: ${VITE_AZURE_STORAGE_CONTAINER:-health-files}
        VITE_AZURE_STORAGE_CONNECTION_STRING: ${VITE_AZURE_STORAGE_CONNECTION_STRING}
        VITE_BACKEND_SERVICE_URL: ${VITE_BACKEND_SERVICE_URL:-http://backend:3001/api}
        VITE_APP_NAME: ${VITE_APP_NAME:-Health Monitor}
        VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0}
        VITE_ENVIRONMENT: ${VITE_ENVIRONMENT:-production}
    ports:
      - "80:5173"
    environment:
      - NODE_ENV=production
      - PORT=80
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5173', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - backend

  # Backend service (internal only)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        NODE_VERSION: 22
    # No ports exposed - backend is internal only
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      # Azure Cosmos DB Configuration (backend expects individual endpoint and key)
      - AZURE_COSMOS_ENDPOINT=${AZURE_COSMOS_ENDPOINT}
      - AZURE_COSMOS_KEY=${AZURE_COSMOS_KEY}
      - AZURE_COSMOS_DATABASE=${AZURE_COSMOS_DATABASE:-HealthMonitorDB}
      # Azure Storage Configuration
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING}
      # CORS and Rate Limiting
      - ALLOWED_ORIGINS=http://localhost:5173,http://frontend:5173
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}
      - AZURE_OPENAI_CHAT_ENDPOINT=${AZURE_OPENAI_CHAT_ENDPOINT}
      - AZURE_OPENAI_CHAT_API_KEY=${AZURE_OPENAI_CHAT_API_KEY}
      - AZURE_OPENAI_CHAT_MODEL=${AZURE_OPENAI_CHAT_MODEL}
      - AZURE_OPENAI_CHAT_DEPLOYMENT=${AZURE_OPENAI_CHAT_DEPLOYMENT}
      - AZURE_OPENAI_VECTOR_STORE_ID=${AZURE_OPENAI_VECTOR_STORE_ID}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_KEY}
      - AZURE_OPENAI_ASSISTANT_ID=${AZURE_OPENAI_ASSISTANT_ID}
    volumes:
      # Optional: Mount logs directory for persistence
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Development service with hot reload
  health-monitor-dev:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: builder
    profiles:
      - dev
    ports:
      - "5173:5173"
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    environment:
      - NODE_ENV=development 